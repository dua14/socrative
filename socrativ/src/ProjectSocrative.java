
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.ButtonGroup;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author az
 */
public class ProjectSocrative extends javax.swing.JFrame {

    ButtonGroup group = new ButtonGroup();

    static int count = 24;
    int num = 2;
    int radio1 = 0;
    int radio2 = 0;
    int radio3 = 0;
    int check1 = 0;
    int check2 = 0;
    int check3 = 0;
    static int score = 0;

    /*
     * Creates new form ProjectSocrative
     */
    public ProjectSocrative() {

        initComponents();
    }
//Two dimensional arraylist named dlist
    static ArrayList<ArrayList<String>> dlist = new ArrayList<ArrayList<String>>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        a = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        ansone = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        next = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        buttonGroup1.add(a);
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRadioButton3)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2)
                            .addComponent(a))))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ansone, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(457, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(next))
                .addGap(225, 225, 225))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel2)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ansone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(a, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRadioButton3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(next)
                .addGap(69, 69, 69))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        check1 = 0;
        check2 = 0;
        check3 = 0;
        radio1 = 0;
        radio2 = 0;
        radio3 = 0;
        Random rand = new Random();
        if (count > 15) {
           
            String s = Integer.toString(num);
            jLabel2.setText(s);
            num++;
            int opt = rand.nextInt(count);

            dlist = method(opt, dlist);

            count--;
        } else {
            close();
            Result r = new Result();
            r.setVisible(true);
            
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        if (check2 == 1 || check3 == 1) {
            ScoreReset();
        }
        if (radio1 == 0) {
            radio2 = 0;
            radio3 = 0;
            radio1 = 1;
            if (ansone.getText().contains("Object oriented programming") || ansone.getText().contains("To create an object")
                    || ansone.getText().contains("Method overloading") || ansone.getText().contains("One object uses other")
                    || ansone.getText().contains("Super class to subclass") 
                    || ansone.getText().contains("Super class reference variable can refer to a subclass object")
                    || ansone.getText().contains("Double to integer") || ansone.getText().contains("Run time polymorphism")) {

                check1 = 1;
                ScoreSet();
            }
            // TODO add your handling code here:
    }//GEN-LAST:event_aActionPerformed
    }
    private void jLabel1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel1AncestorAdded
        Random rand = new Random();
        jLabel2.setText("1");
        int optn = rand.nextInt(25);
        dlist = method(optn, dlist);// TODO add your handling code here:
    }//GEN-LAST:event_jLabel1AncestorAdded

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        if (check1 == 1 || check3 == 1) {
            ScoreReset();
        }
        if (radio2 == 0) {
            radio1 = 0;
            radio3 = 0;
            radio2 = 1;
            if (jLabel3.getText().contains("Graphical user interface") || jLabel3.getText().contains("Do while loop")
                    || jLabel3.getText().contains("Method overriding") || jLabel3.getText().contains("One object owns other")
                    || jLabel3.getText().contains("To call the construcotr from the constructor of same class") || jLabel3.getText().contains("Can not")
                    || jLabel3.getText().contains("call the super class constructor and can acces the member of super class")
                    || jLabel3.getText().contains("Name and type sugnature should be same") || jLabel3.getText().contains("compile time polymorphism")
                    || jLabel3.getText().contains("Inner loop")) {

                check2 = 1;
                ScoreSet();
            }   // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed
    }
    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        if (check1 == 1 || check2 == 1) {
            ScoreReset();
        }
        if (radio3 == 0) {
            radio1 = 0;
            radio2 = 0;
            radio3 = 1;
            if (jLabel4.getText().contains("32") || jLabel4.getText().contains("No parameter")
                    || jLabel4.getText().contains("Both of above") || jLabel4.getText().contains("Abstraction")
                    || jLabel4.getText().contains("Run time polymorphism") || jLabel4.getText().contains("A sub class can have only one super class")
                    || jLabel4.getText().contains("Both of above")) {

                check3 = 1;
                ScoreSet();
            }
            // TODO add your handling code here:
        }   // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectSocrative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectSocrative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectSocrative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectSocrative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new ProjectSocrative().setVisible(true);

            }
        });
    }

    public static void fill() {
        dlist.add(new ArrayList<>());
        dlist.get(0).add(0, "OOP stans for what");
        dlist.get(0).add(1, "Object oriented programming");
        dlist.get(0).add(2, "Oracle oriented programming");
        dlist.get(0).add(3, "None");
        dlist.add(new ArrayList<>());
        dlist.get(1).add(0, "GUI stands for?");
        dlist.get(1).add(1, "Geometrical user interface");
        dlist.get(1).add(2, "Graphical user interface");
        dlist.get(1).add(3, "None");
        dlist.add(new ArrayList<>());
        dlist.get(2).add(0, "Integer stores how many bits");
        dlist.get(2).add(1, "8");
        dlist.get(2).add(2, "16");
        dlist.get(2).add(3, "32");
        dlist.add(new ArrayList<>());
        dlist.get(3).add(0, "Constructor is called");
        dlist.get(3).add(1, "To create an object");
        dlist.get(3).add(2, "Like a normal method");
        dlist.get(3).add(3, "Both");
        dlist.add(new ArrayList<>());
        dlist.get(4).add(0, "Which of the following will execute atleast ones?");
        dlist.get(4).add(1, "For loop");
        dlist.get(4).add(2, "Do while loop");
        dlist.get(4).add(3, "While");
        dlist.add(new ArrayList<>());
        dlist.get(5).add(0, "Default constructor have");
        dlist.get(5).add(1, "Atleast one parameter");
        dlist.get(5).add(2, "More than one parameter");
        dlist.get(5).add(3, "No parameter");
        dlist.add(new ArrayList<>());
        dlist.get(6).add(0, "Which of the follwing support compile time polymorphism in java");
        dlist.get(6).add(1, "Method overloading");
        dlist.get(6).add(2, "Method overriding");
        dlist.get(6).add(3, "Constructor overloading");
        dlist.add(new ArrayList<>());
        dlist.get(7).add(0, "Which of the following support run time polymorphism in java");
        dlist.get(7).add(1, "Method overloading");
        dlist.get(7).add(2, "Method overriding");
        dlist.get(7).add(3, "Constructor overloading");
        dlist.add(new ArrayList<>());
        dlist.get(8).add(0, "Anonymous class is ");
        dlist.get(8).add(1, "Inner class");
        dlist.get(8).add(2, "A class without name");
        dlist.get(8).add(3, "Both of above");
        dlist.add(new ArrayList<>());
        dlist.get(9).add(0, "Aggregation is an association in which");
        dlist.get(9).add(1, "One object uses other");
        dlist.get(9).add(2, "One object owns other");
        dlist.get(9).add(3, "None");
        dlist.add(new ArrayList<>());
        dlist.get(10).add(0, "Composition is an association in which");
        dlist.get(10).add(1, "One object uses other");
        dlist.get(10).add(2, "One object owns other");
        dlist.get(10).add(3, "None");
        dlist.add(new ArrayList<>());
        dlist.get(11).add(0, "Interaface is used to achieve");
        dlist.get(11).add(1, "Encapsulation");
        dlist.get(11).add(2, "Polymorphism");
        dlist.get(11).add(3, "Abstraction");
        dlist.add(new ArrayList<>());
        dlist.get(12).add(0, "Constructor complete execution in the order");
        dlist.get(12).add(1, "Super class to subclass");
        dlist.get(12).add(2, "Subclass to super class");
        dlist.get(12).add(3, "Random");
        dlist.add(new ArrayList<>());
        dlist.get(13).add(0, "What is constructor chaining");
        dlist.get(13).add(1, "To call super class constructor from subclass");
        dlist.get(13).add(2, "To call the construcotr from the constructor of same class");
        dlist.get(13).add(3, "To call the constructor of subclass from super class");
        dlist.add(new ArrayList<>());
        dlist.get(14).add(0, "Dynamic method dispatch is also called");
        dlist.get(14).add(1, "Encapsulation");
        dlist.get(14).add(2, "Compile time polymorphism");
        dlist.get(14).add(3, "Run time polymorphism");
        dlist.add(new ArrayList<>());
        dlist.get(15).add(0, "A subclass ----- acces the private members of itd super class");
        dlist.get(15).add(1, "Can");
        dlist.get(15).add(2, "Can not");
        dlist.get(15).add(3, "Depends upon the situation");
        dlist.add(new ArrayList<>());
        dlist.get(16).add(0, " Super keyword can");
        dlist.get(16).add(1, "call the super class constructor only");
        dlist.get(16).add(2, "call the super class constructor and can acces the member of super class");
        dlist.get(16).add(3, "access the members of super class only");
        dlist.add(new ArrayList<>());
        dlist.get(17).add(0, "Which statement is true");
        dlist.get(17).add(1, "A subclass can not be a superclass of another class");
        dlist.get(17).add(2, "A subclass can have many super classes");
        dlist.get(17).add(3, "A sub class can have only one super class");
        dlist.add(new ArrayList<>());
        dlist.get(18).add(0, "Which statement is true");
        dlist.get(18).add(1, "Super class reference variable can refer to a subclass object");
        dlist.get(18).add(2, "Subclass reference variable can refer to a super class object");
        dlist.get(18).add(3, "Both can refer to eachother");
        dlist.add(new ArrayList<>());
        dlist.get(19).add(0, "For the methods to be overriden ");
        dlist.get(19).add(1, "Name should be same");
        dlist.get(19).add(2, "Name and type sugnature should be same");
        dlist.get(19).add(3, "Return type should be same");
        dlist.add(new ArrayList<>());
        dlist.get(20).add(0, "Which of the following statement is true?");
        dlist.get(20).add(1, "Interfaces are used to hide the implimentation detail from user");
        dlist.get(20).add(2, "In interfaces all methods are declared without body");
        dlist.get(20).add(3, "Both of above");
        dlist.add(new ArrayList<>());
        dlist.get(21).add(0, " Which of he following conversion is possibly loosy?");
        dlist.get(21).add(1, "Double to integer");
        dlist.get(21).add(2, "Integer to double");
        dlist.get(21).add(3, "float to double");
        dlist.add(new ArrayList<>());
        dlist.get(22).add(0, "staitc polymorphism refers to :");
        dlist.get(22).add(1, "Run time polymorphism");
        dlist.get(22).add(2, "compile time polymorphism");
        dlist.get(22).add(3, "Dynamic method dispatch");
        dlist.add(new ArrayList<>());
        dlist.get(23).add(0, "Dynamic polymorphism refers to");
        dlist.get(23).add(1, "Run time polymorphism");
        dlist.get(23).add(2, "compile time polymorphism");
        dlist.get(23).add(3, "Polymorphism");
        dlist.add(new ArrayList<>());
        dlist.get(24).add(0, " which of the folowing loop is executed most?");
        dlist.get(24).add(1, "Outer loop");
        dlist.get(24).add(2, "Inner loop");
        dlist.get(24).add(3, "Depends upon the condition");

    }

    public void ScoreSet() {
        score++;
    }

    public void ScoreReset() {
        score--;
    }

    public ArrayList<ArrayList<String>> method(int op, ArrayList<ArrayList<String>> alist) {

        String qs = alist.get(op).get(0);
        String ans1 = alist.get(op).get(1);
        String ans2 = alist.get(op).get(2);
        String ans3 = alist.get(op).get(3);

        jLabel1.setText(qs);
        ansone.setText(ans1);
        jLabel3.setText(ans2);
        jLabel4.setText(ans3);
        alist.remove(op);
        return alist;
    }

     public void close() {
        WindowEvent WinClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(WinClosingEvent);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton a;
    private javax.swing.JLabel ansone;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JToggleButton next;
    // End of variables declaration//GEN-END:variables

}
